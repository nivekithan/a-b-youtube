datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model User {
  userId          String           @id @unique
  name            String           @db.Text
  googleSub       String           @unique @db.VarChar(255)
  pictureUrl      String           @db.Text
  youtubeAccounts YoutubeAccount[]
  thumbnails      Thumbnails[]
  Jobs            ThumbnailJob[]
}

model YoutubeAccount {
  accountId Int @id @unique @default(autoincrement())

  user                      User           @relation(fields: [userId], references: [userId])
  oauthToken                String         @db.Text
  refreshToken              String         @db.Text
  channelName               String         @db.Text
  ChannelProfilePictureLink String         @db.Text
  channelId                 String
  uploadsPlaylistId         String         @db.Text
  expiresIn                 DateTime
  jobs                      ThumbnailJob[]

  userId String

  @@unique([userId, channelId])
}

model ThumbnailJob {
  jobId String @id @unique

  user           User              @relation(fields: [userId], references: [userId], onDelete:  Cascade)
  youtubeAccount YoutubeAccount    @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
  thumbnails     Thumbnails[]
  results        ThumbnailResult[]
  videoName      String            @db.Text
  thumbnailUrl   String
  testDays       Int
  currentDay     Int               @default(0)
  videoId        String // Youtube video id
  completed      Boolean           @default(false)
  updatedAt      DateTime          @updatedAt
  createdAt      DateTime          @default(now())

  userId    String
  accountId Int
  // @@unique([userId, videoId])
}

model Thumbnails {
  fileId String @id @unique

  user        User              @relation(fields: [userId], references: [userId], onDelete:  Cascade)
  job         ThumbnailJob      @relation(fields: [jobId], references: [jobId], onDelete:  Cascade)
  result      ThumbnailResult[]
  videoId     String // yotube video id
  contentType String

  jobId  String
  userId String
}

model ThumbnailResult {
  id Int @id @unique @default(autoincrement())

  thumbnail           Thumbnails   @relation(fields: [thumbnailId], references: [fileId], onDelete:  Cascade)
  thumbnailJob        ThumbnailJob @relation(fields: [jobId], references: [jobId], onDelete:  Cascade)
  clickThroughRate    Float
  averageViewDuration Float
  at                  String // Format should be YYYY-MM-DD
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  thumbnailId String
  jobId       String
}
